/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  8
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "constant";
    object      picProperties;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

//Note: One can type in an invalid model name to get a list of all defined models at runtime!

SolverSettings
{
    typeIdList                      (e Ar+);//Defined species
    fieldCalculation                (Ar+ e);//Calculate separate fields for these species

    ChargeDistribution              VolumeWeighting;//Model for weighting the charge to the mesh
    FieldWeigthing                  VolumeWeighting;//Model for weighting the electric field to the parcel

    spaceCharge                     0;//[As] space charge to be uniformly distributed

    checkDebyeLength                false;//Print a message if the cell is larger than the Debye length
    checkPlasmaFrequency            false;//Print a message if the time step is larger than the plasma frequency

    warnCellTrajectory              0.5;//Warn once every time step if a particle moves further than x of the cell length (there may even be faster particles)
}

Diagnostics
{
    modelList (Composition Temperature);//Select these Diagnostic models

    CompositionCoeffs
    {
        printNumberDensity true;
        //Can be specified for every model (optional):
        //diagnosticControl timeStep;//[timeStep|writeTime|runTime|...]
        //diagnosticInterval 100;//Only run every 100th timestep
    }
}

moleculeProperties//Properties of all species defined via SolverSettings/typeIdList
{
    e
    {
        mass                            9.109e-31;
        diameter                        5.6358e-15;
        omega                           1;//viscosity index (used only by the VariableHardSphere model)
        charge                          -1.602176e-19;
        solveMovement                   true;//Whether the parcel should move or stay stationary
        nEquivalentParticles            1e6;//Number of real particles included in the parcel
    }
    Ar+
    {
        mass                            6.6817894e-26;
        diameter                        3.67e-10;
        omega                           1;
        charge                          1.602176e-19;
        solveMovement                   true;
        nEquivalentParticles            1e6;
    }


    SpeciesRelations//Relations between species. Required for the collision algorithms among others
    {
        electronTypeId e;
        species1
        {
            neutralTypeId none;
            ionTypeId Ar+;
        }
    }
}

BoundaryModels
{
    //Reflection model for boundaries of type wall (see: constant/polyMesh/boundary)
    WallReflectionModel SpecularReflection;

    //List of PatchEvent models
    PatchEventModels
    {
        modelList ();
    }

    //Boundary models have to be defined for patches
    PatchBoundaryModels
    {
        modelList
        (
            
            "collector|source"//Define the model on muliple patches (circuit models need an anode and an cathode)
            {
                type           circuitRLC;
                circuitRLCCoeffs
                {
                    EmissionModels ();

                    R 1;//resistance
                    C 1e-6;//capacitance
                    L 0.04;//inductance
                    V 100;//voltage

                    collector//patch name
                    {
                        type anode; //type
                    }
                    source//patch name
                    {
                        type cathode;//type
                    }
                }
            }
        );
    }

    
}

MaxwellSolver                  ElectroStatic;
ParticlePusher                 BorisNR;

ParticleMerging                     none;
CollisionModels
{
    BackgroundGasModel              none;
    ElectronNeutralCollisionModel   none;
    BinaryCollisionModel            none;
    CoulombCollisionModel           none;
}


// ************************************************************************* //
